language: node_js
node_js:
- '0.8'
- '0.9'
- '0.10'
- '0.11'
compiler: clang
env:
  global:
    - secure: "UVXTR2miHYhPNn167iOrAxlr7KY7qhskoj2jdZiBkcRXeCp0Kh+yvGs60T57bGC0Op/PmV9zHYnstjaGhDVsw/k9eBbn6TLtl8np14luuozBWU72j1JhuPTbJsSzjuKojWNhiZ1mJdMrIG99r7qhPn86esRmVSZYEeaP5LcyyiY="
    - secure: "cYIqIv8qba4HUN6ezwzObyw9Jp3DnsZAUWTu11F7j3c/K/cyMJ/ImoDhB9FwzosWswRIxkz5XqO/9QKJLXHuDni6HePfltfc+BOIoFoF2BI6jGSjjuQRotXZqqlBuV/wRNf4TrjPLLIAYnPjl4o4YUBylmZ6RpolC+0fntCY1FI="

before_install:
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put local node-pre-gyp on PATH
- export PATH=./node_modules/.bin/:$PATH
# put global node-gyp on PATH
- npm install node-gyp -g
# install aws-sdk so it is available for publishing
- npm install aws-sdk
# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;

install:
# ensure source install works
- npm install --build-from-source
# test our module
- node serialport.js

before_script:
- echo "Publishing Binary Package? ->" $PUBLISH_BINARY
# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi;
# cleanup
- node-pre-gyp clean
- node-gyp clean

script:
# if publishing, test installing from remote
- INSTALL_RESULT=0
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean

after_success:
# if success then query and display all published binaries
- node-pre-gyp info
